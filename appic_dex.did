type BurnPositionArgs = record {
  amount1_min : nat;
  pool : CandidPoolId;
  amount0_min : nat;
  tick_lower : int;
  tick_upper : int;
};
type BurnPositionError = variant {
  PositionNotFound;
  InvalidAmount;
  InvalidPoolFee;
  PoolNotInitialized;
  InsufficientBalance;
  LiquidityOverflow;
  FeeOverflow;
  BurntPositionWithdrawalFailed : WithdrawalError;
  InvalidTick;
  LockedPrinciapl;
  AmountOverflow;
};
type CandidPathKey = record { fee : nat; intermediary_token : principal };
type CandidPoolId = record {
  fee : nat;
  token0 : principal;
  token1 : principal;
};
type CandidSwapSuccess = record { amount_out : nat; amount_in : nat };
type CreatePoolArgs = record {
  fee : nat;
  sqrt_price_x96 : nat;
  token_a : principal;
  token_b : principal;
};
type CreatePoolError = variant {
  InvalidSqrtPriceX96;
  InvalidFeeAmount;
  InvalidToken : principal;
  PoolAlreadyExists;
};
type DepositError = variant {
  TemporarilyUnavailable : text;
  InvalidDestination : text;
  InsufficientAllowance : record { allowance : nat };
  AmountTooLow : record { min_withdrawal_amount : nat };
  InsufficientFunds : record { balance : nat };
};
type ExactInputParams = record {
  token_in : principal;
  path : vec CandidPathKey;
  from_subaccount : opt blob;
  amount_out_minimum : nat;
  amount_in : nat;
};
type ExactInputSingleParams = record {
  zero_for_one : bool;
  from_subaccount : opt blob;
  amount_out_minimum : nat;
  amount_in : nat;
  pool_id : CandidPoolId;
};
type ExactOutputParams = record {
  amount_in_maximum : nat;
  path : vec CandidPathKey;
  from_subaccount : opt blob;
  amount_out : nat;
  token_out : principal;
};
type ExactOutputSingleParams = record {
  amount_in_maximum : nat;
  zero_for_one : bool;
  from_subaccount : opt blob;
  amount_out : nat;
  pool_id : CandidPoolId;
};
type MintPositionArgs = record {
  amount1_max : nat;
  pool : CandidPoolId;
  from_subaccount : opt blob;
  amount0_max : nat;
  tick_lower : int;
  tick_upper : int;
};
type MintPositionError = variant {
  DepositError : DepositError;
  TickNotAlignedWithTickSpacing;
  InvalidAmount;
  InvalidPoolFee;
  PoolNotInitialized;
  InsufficientBalance;
  LiquidityOverflow;
  FeeOverflow;
  PositionAlreadyExists;
  InvalidTick;
  LockedPrinciapl;
  AmountOverflow;
};
type QuoteArgs = variant {
  QuoteExactOutput : QuoteExactParams;
  QuoteExactOutputSingleParams : QuoteExactSingleParams;
  QuoteExactInputParams : QuoteExactParams;
  QuoteExactInputSingleParams : QuoteExactSingleParams;
};
type QuoteError = variant {
  InvalidAmount;
  PoolNotInitialized;
  InvalidFee;
  PriceLimitOutOfBounds;
  InvalidPathLength;
  IlliquidPool;
  PriceLimitAlreadyExceeded;
  InvalidFeeForExactOutput;
  CalculationOverflow;
};
type QuoteExactParams = record {
  path : vec CandidPathKey;
  exact_token : principal;
  exact_amount : nat;
};
type QuoteExactSingleParams = record {
  zero_for_one : bool;
  pool_id : CandidPoolId;
  exact_amount : nat;
};
type Result = variant { Ok; Err : BurnPositionError };
type Result_1 = variant { Ok; Err : CreatePoolError };
type Result_2 = variant { Ok; Err : MintPositionError };
type Result_3 = variant { Ok : nat; Err : QuoteError };
type Result_4 = variant { Ok : CandidSwapSuccess; Err : SwapError };
type SwapArgs = variant {
  ExactOutput : ExactOutputParams;
  ExactInput : ExactInputParams;
  ExactOutputSingle : ExactOutputSingleParams;
  ExactInputSingle : ExactInputSingleParams;
};
type SwapError = variant {
  FailedToWithdraw : record {
    amount_out : nat;
    amount_in : nat;
    reason : WithdrawalError;
  };
  InvalidAmountOut;
  DepositError : DepositError;
  InvalidAmountIn;
  InvalidAmountInMaximum;
  InvalidAmountOutMinimum;
  InvalidPoolFee;
  PoolNotInitialized;
  PathLengthTooSmall : record { minimum : nat8; received : nat8 };
  PathDuplicated;
  PathLengthTooBig : record { maximum : nat8; received : nat8 };
  LockedPrincipal;
  NoInRangeLiquidity;
  SwapFailedRefunded : record {
    refund_error : opt WithdrawalError;
    failed_reason : SwapFailedReason;
  };
};
type SwapFailedReason = variant {
  InvalidAmount;
  PoolNotInitialized;
  InsufficientBalance;
  PriceLimitOutOfBounds;
  BalanceOverflow;
  TooLittleReceived;
  TooMuchRequeted;
  NoInRangeLiquidity;
  PriceLimitAlreadyExceeded;
  InvalidFeeForExactOutput;
  CalculationOverflow;
};
type WithdrawalError = variant {
  FeeUnknown;
  TemporarilyUnavailable : text;
  InvalidDestination : text;
  InsufficientAllowance : record { allowance : nat };
  InsufficientBalance : record { balance : nat };
  AmountTooLow : record { min_withdrawal_amount : nat };
};
service : () -> {
  burn : (BurnPositionArgs) -> (Result);
  create_pool : (CreatePoolArgs) -> (Result_1);
  mint_position : (MintPositionArgs) -> (Result_2);
  quote : (QuoteArgs) -> (Result_3) query;
  swap : (SwapArgs) -> (Result_4);
}
